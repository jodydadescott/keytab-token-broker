// /*
// Copyright Â© 2020 Jody Scott <jscott@paloaltonetworks.com>

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at

//     http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */
// package cmd

// import (
// 	"fmt"
// 	"os"

// 	"github.com/spf13/cobra"

// 	homedir "github.com/mitchellh/go-homedir"
// 	"github.com/spf13/viper"
// )

// var cfgFile string

// // rootCmd represents the base command when called without any subcommands
// var rootCmd = &cobra.Command{
// 	Use:   "kerberos-bridge",
// 	Short: "get kerberos keytabs with oauth tokens",
// 	Long: `Your application obtains an oauth token from your identity provider and
// 	then uses the token to obtain a short lived keytab. The keytab can be used to
// 	obtain a kerberos ticket. For example you can mount a Windows CIFS system
// 	without and read/write based on the privileges of the user mapped to the
// 	keytab. Authorization to the keytab is done using Open Policy Agent (OPA).
// 	Based on your token you can obtain the desired keytab if the policy permits.`,
// 	// Uncomment the following line if your bare application
// 	// has an action associated with it:
// 	//	Run: func(cmd *cobra.Command, args []string) { },
// }

// // Execute adds all child commands to the root command and sets flags appropriately.
// // This is called by main.main(). It only needs to happen once to the rootCmd.
// func Execute() {
// 	if err := rootCmd.Execute(); err != nil {
// 		fmt.Println(err)
// 		os.Exit(1)
// 	}
// }

// func init() {
// 	cobra.OnInitialize(initConfig)

// 	// Here you will define your flags and configuration settings.
// 	// Cobra supports persistent flags, which, if defined here,
// 	// will be global for your application.

// 	rootCmd.PersistentFlags().StringVar(&cfgFile, "config", "", "config file (default is $HOME/.kerberos-bridge.yaml)")

// 	// Cobra also supports local flags, which will only run
// 	// when this action is called directly.
// 	rootCmd.Flags().BoolP("toggle", "t", false, "Help message for toggle")
// }

// // initConfig reads in config file and ENV variables if set.
// func initConfig() {
// 	if cfgFile != "" {
// 		viper.SetConfigFile(cfgFile)
// 	} else {
// 		home, err := homedir.Dir()
// 		if err != nil {
// 			fmt.Println(err)
// 			os.Exit(1)
// 		}

// 		viper.AddConfigPath(home)
// 		viper.SetConfigName(".kerberos-bridge")
// 	}

// 	viper.AutomaticEnv() // read in environment variables that match

// 	// If a config file is found, read it in.
// 	if err := viper.ReadInConfig(); err == nil {
// 		fmt.Println("Using config file:", viper.ConfigFileUsed())
// 	}
// }
